

#Open this file on your LB server

sudo vi /etc/hosts

#Add 2 records into this file with Local IP address and arbitrary name for both of your Web Servers

172.31.85.27 Web1
172.31.92.137 Web2

<WebServer1-Private-IP-Address> Web1
<WebServer2-Private-IP-Address> Web2

### REGISTER A NEW DOMAIN NAME AND CONFIGURE SECURED CONNECTION USING SSL/TLS CERTIFICATES
Let us make necessary configurations to make connections to our Tooling Web Solution secured!

In order to get a valid SSL certificate – you need to register a new domain name, you can do it using any Domain name registrar – a company that manages reservation of domain names. The most popular ones are: Godaddy.com, Domain.com, Bluehost.com.

1. Register a new domain name with any registrar of your choice in any domain zone (e.g. .com, .net, .org, .edu, .info, .xyz or any other)

2. Assign an Elastic IP to your Nginx LB server and associate your domain name with this Elastic IP

Click Allocate new address in the Elastic IPs page.
Then, click Allocate in the next page.
Right-click the row of the newly created elastic IP, and click Associate address.
Choose the EC2 instance you are integrating.

You might have noticed, that every time you restart or stop/start your EC2 instance – you get a new public IP address. When you want to associate your domain name – it is better to have a static IP address that does not change after reboot. Elastic IP is the solution for this problem, learn how to allocate an Elastic IP and associate it with an EC2 server on this page.

3. Update A record in your registrar to point to Nginx LB using Elastic IP address

Learn how associate your domain name to your Elastic IP on this page.

Connect the elastic IP to your domain.
Go to GoDaddy’s Domain Manager.
Go to the Manage DNS of the domain you are integrating.
Replace the Value of record with Type A with the elastic IP you just created.
Wait for changes to reflect (This takes at least 600 seconds to reflect, depending on the TTL you specified).
To check if successful, the domain should now load the EC2 instance you pointed it too.



Side Self Study: Read about different DNS record types and learn what they are used for.

Check that your Web Servers can be reached from your browser using new domain name using HTTP protocol – http://<your-domain-name.com>

Configure Nginx to recognize your new domain name
Update your nginx.conf with server_name www.<your-domain-name.com> instead of server_name www.domain.com

Install certbot and request for an SSL/TLS certificate
Make sure snapd service is active and running

sudo systemctl status snapd
Install certbot

sudo snap install --classic certbot
Request your certificate (just follow the certbot instructions – you will need to choose which domain you want your certificate to be issued for, domain name will be looked up from nginx.conf file so make sure you have updated it on step 4).

sudo ln -s /snap/bin/certbot /usr/bin/certbot
sudo certbot --nginx
Test secured access to your Web Solution by trying to reach https://<your-domain-name.com>

You shall be able to access your website by using HTTPS protocol (that uses TCP port 443) and see a padlock pictogram in your browser’s search string.
Click on the padlock icon and you can see the details of the certificate issued for your website.     

